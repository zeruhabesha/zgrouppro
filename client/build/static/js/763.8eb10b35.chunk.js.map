{"version":3,"file":"static/js/763.8eb10b35.chunk.js","mappings":"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","sources":["admin/Company.js","admin/components/AdminFooter.js","admin/components/AdminNavbar.js","admin/components/Sidebar.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport AdminNavbar from './components/AdminNavbar';\r\nimport Sidebar from './components/Sidebar';\r\nimport Footer from './components/AdminFooter';\r\nimport { Modal, Button, Form } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst Company = () => {\r\n  // useEffect(() => {\r\n  //   const fetchCompanies = async () => {\r\n  //     try {\r\n  //       const response = await axios.get('/api/companies', {\r\n  //         headers: {\r\n  //           Authorization: `Bearer ${token}`,\r\n  //         },\r\n  //       })\r\n  //     } catch (error) {\r\n  //       console.error('Error fetching companies:', error);\r\n  //     }\r\n  //   };\r\n\r\n  //   fetchCompanies();\r\n  // }, []);\r\n\r\n  const [companies, setCompanies] = useState([]);\r\n  const [filteredCompanies, setFilteredCompanies] = useState([]);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [newCompany, setNewCompany] = useState({\r\n    name: '',\r\n    email: '',\r\n    password: '',\r\n    companyType: '',\r\n    category: '',\r\n    subcategory: [],\r\n    status: 'Active',\r\n    address: '',\r\n    phoneNumber: '',\r\n    website: '',\r\n    description: '',\r\n    socialMedia: {\r\n      facebook: '',\r\n      twitter: '',\r\n      linkedin: '',\r\n      instagram: '',\r\n      telegram: '',\r\n    },\r\n    promotionStartDate: '',\r\n    promotionEndDate: '',\r\n    paymentDetails: {\r\n      paymentMethod: '',\r\n      paymentDate: '',\r\n      paymentAmount: 0,\r\n    },\r\n    contactPerson: {\r\n      name: '',\r\n      email: '',\r\n      phoneNumber: '',\r\n    },\r\n    logoUrl: '',\r\n  });\r\n\r\n  const [categories, setCategories] = useState([]); // List of categories\r\n  const [subcategories, setSubcategories] = useState([]); // List of subcategories based on category\r\n  const [editingCompany, setEditingCompany] = useState(null);\r\n  const [modalIsOpen, setModalIsOpen] = useState(false);\r\n  const [deleteConfirmModal, setDeleteConfirmModal] = useState(false);\r\n  const [companyToDelete, setCompanyToDelete] = useState(null);\r\n  const [isLoadingCategories, setIsLoadingCategories] = useState(true); // Loading state for categories\r\n  const [isLoadingSubcategories, setIsLoadingSubcategories] = useState(false); // Loading state for subcategories\r\n  const [announcements, setAnnouncements] = useState([]);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [announcementsPerPage] = useState(6);\r\n  const [promotions, setPromotions] = useState([]);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [showAddModal, setShowAddModal] = useState(false);\r\n  const [currentPromotion, setCurrentPromotion] = useState(null);\r\n  const [showToast, setShowToast] = useState(false);\r\n  const [toastMessage, setToastMessage] = useState('');\r\n  const [showConfirmDelete, setShowConfirmDelete] = useState(false);\r\n  const [promotionToDelete, setPromotionToDelete] = useState(null);\r\n  const [file, setFile] = useState(null);\r\n\r\n  const token = localStorage.getItem('token');\r\n\r\n  useEffect(() => {\r\n    fetchCompanies(); // Fetch companies on component mount\r\n    fetchCategories();\r\n}, []);\r\n\r\nuseEffect(() => {\r\n  if (newCompany.category) {\r\n    fetchSubcategories(newCompany.category);\r\n  } else {\r\n    setSubcategories([]);\r\n  }\r\n}, [newCompany.category]);\r\n\r\nconst fetchCompanies = async () => {\r\n  try {\r\n    const response = await axios.get('/api/companies', {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    });\r\n    setCompanies(response.data);\r\n  } catch (error) {\r\n    console.error('Error fetching companies:', error);\r\n  }\r\n};\r\n\r\n  // useEffect(() => {\r\n  //   setFilteredCompanies(\r\n  //     companies.filter(company =>\r\n  //       company && company.name && company.name.toLowerCase().includes(searchQuery.toLowerCase())\r\n  //     )\r\n  //   );\r\n  // }, [searchQuery, companies]);\r\n\r\n  useEffect(() => {\r\n    if (newCompany.category) {\r\n      // Fetch subcategories based on selected category\r\n      fetchSubcategories(newCompany.category);\r\n    }\r\n  }, [newCompany.category]);\r\n\r\n  // const fetchCompanies = async () => {\r\n  //   try {\r\n  //     const response = await axios.get('/api/companies', {\r\n  //       headers: {\r\n  //         Authorization: `Bearer ${token}`,\r\n  //       },\r\n  //     });\r\n  //     setCompanies(response.data);\r\n  //   } catch (error) {\r\n  //     console.error('Error fetching companies', error);\r\n  //   }\r\n  // };\r\n\r\n\r\n  // const fetchPromotions = async () => {\r\n  //   try {\r\n  //     const response = await axios.get('/api/promotions', {\r\n  //       headers: { Authorization: `Bearer ${token}` },\r\n  //     });\r\n  //     setAnnouncements(response.data);\r\n  //   } catch (error) {\r\n  //     console.error('Error fetching promotions:', error);\r\n  //   }\r\n  // };\r\n  const fetchPromotions = async () => {\r\n    try {\r\n      const response = await axios.get('/api/companies');\r\n      setAnnouncements(response.data);\r\n    } catch (error) {\r\n      console.error('Error fetching announcements:', error);\r\n    }\r\n  };\r\n\r\n  \r\n useEffect(() => {\r\n  fetchPromotions(); // Call fetchPromotions on component mount\r\n}, []);\r\n\r\nconst handleSearch = (event) => {\r\n  const query = event.target.value || '';\r\n  setSearchQuery(query);\r\n  setCurrentPage(1);\r\n};\r\n\r\nconst filteredAnnouncements = announcements.filter((announcement) =>\r\n  announcement && announcement.name && announcement.name.toLowerCase().includes(searchQuery.toLowerCase())\r\n);\r\n\r\nconst indexOfLastAnnouncement = currentPage * announcementsPerPage;\r\nconst indexOfFirstAnnouncement = indexOfLastAnnouncement - announcementsPerPage;\r\nconst currentAnnouncements = filteredAnnouncements.slice(indexOfFirstAnnouncement, indexOfLastAnnouncement);\r\n\r\nconst paginate = (pageNumber) => {\r\n  setCurrentPage(pageNumber);\r\n};\r\n\r\n\r\n\r\n\r\n\r\nconst fetchCategories = async () => {\r\n  try {\r\n    const response = await axios.get('/api/categories', {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    });\r\n    setCategories(response.data);\r\n  } catch (error) {\r\n    console.error('Error fetching categories:', error);\r\n  } finally {\r\n    setIsLoadingCategories(false);\r\n  }\r\n};\r\n\r\n\r\nconst handleInputChange = (e) => {\r\n  const { name, value, type, files } = e.target;\r\n\r\n  if (type === 'file') {\r\n    setNewCompany((prev) => ({ ...prev, [name]: files[0] }));\r\n  } else if (name === 'subcategory') {\r\n    const selectedSubcategories = Array.from(e.target.selectedOptions, (option) => option.value);\r\n    setNewCompany((prev) => ({ ...prev, subcategory: selectedSubcategories }));\r\n  } else if (name === 'category') {\r\n    setNewCompany((prev) => ({ ...prev, category: value, subcategory: [] }));\r\n  } else {\r\n    setNewCompany((prev) => ({ ...prev, [name]: value }));\r\n  }\r\n};\r\n\r\n\r\n  const handleSocialMediaChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setNewCompany((prevState) => ({\r\n      ...prevState,\r\n      socialMedia: {\r\n        ...prevState.socialMedia,\r\n        [name]: value\r\n      }\r\n    }));\r\n  };\r\n\r\n  const handlePaymentDetailsChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setNewCompany((prevState) => ({\r\n      ...prevState,\r\n      paymentDetails: {\r\n        ...prevState.paymentDetails,\r\n        [name]: value\r\n      }\r\n    }));\r\n  };\r\n\r\n  const handleContactPersonChange = (e, field) => {\r\n    const { value } = e.target;\r\n\r\n    setNewCompany(prevState => ({\r\n      ...prevState,\r\n      contactPerson: {\r\n        ...prevState.contactPerson,\r\n        [field]: value\r\n      }\r\n    }));\r\n  };\r\n\r\n  const handleCreateCompany = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      const companyData = {\r\n        name: newCompany.name,\r\n        email: newCompany.email,\r\n        password: newCompany.password,\r\n        companyType: newCompany.companyType,\r\n        category: newCompany.category,\r\n        subcategory: newCompany.subcategory,\r\n        status: newCompany.status,\r\n        address: newCompany.address,\r\n        phoneNumber: newCompany.phoneNumber,\r\n        website: newCompany.website,\r\n        description: newCompany.description,\r\n        socialMedia: newCompany.socialMedia,\r\n        promotionStartDate: newCompany.promotionStartDate,\r\n        promotionEndDate: newCompany.promotionEndDate,\r\n        paymentDetails: newCompany.paymentDetails,\r\n        contactPerson: newCompany.contactPerson,\r\n      };\r\n\r\n      const formData = new FormData();\r\n   \r\n      if (newCompany.logoUrl instanceof File) { \r\n        formData.append('logoUrl', newCompany.logoUrl);\r\n      }\r\n      for (const key in companyData) {\r\n        if (typeof companyData[key] === 'object') {\r\n          for (const nestedKey in companyData[key]) {\r\n            formData.append(`${key}.${nestedKey}`, companyData[key][nestedKey]);\r\n          }\r\n        } else {\r\n          formData.append(key, companyData[key]);\r\n        }\r\n      }\r\n\r\n      const response = await axios.post('/api/companies', formData, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          'Content-Type': 'multipart/form-data'\r\n        },\r\n      });\r\n\r\n      setCompanies([...companies, response.data.newCompany]);\r\n      setModalIsOpen(false);\r\n      setNewCompany({\r\n        socialMedia: { // Initialize socialMedia here\r\n          facebook: '',\r\n          twitter: '',\r\n          linkedin: '',\r\n          instagram: '',\r\n          telegram: ''\r\n        },\r\n        paymentDetails: {\r\n          paymentMethod: '',\r\n          paymentDate: '',\r\n          paymentAmount: 0\r\n        },\r\n      });\r\n    } catch (error) {\r\n      console.error('Error creating company', error);\r\n      if (error.response && error.response.data && error.response.data.message) {\r\n        alert(`Failed to create company: ${error.response.data.message}`);\r\n      } else {\r\n        alert('Failed to create company. Please try again.');\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleEditCompany = (company) => {\r\n    setEditingCompany(company);\r\n    setNewCompany({\r\n      ...company,\r\n      category: company.category ? company.category.name : '', // Use category name if available\r\n    }); \r\n    setModalIsOpen(true);    \r\n  };\r\n\r\n  const handleUpdateCompany = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // Check if editingCompany is defined\r\n    if (!editingCompany || !editingCompany._id) {\r\n      console.error('Error updating company: No company selected for editing');\r\n      // Optionally, display an error message to the user\r\n      return; \r\n    }\r\n\r\n    try {\r\n      const formData = new FormData();\r\n  \r\n      // Append data to update (excluding password if empty)\r\n      const dataToUpdate = { ...newCompany };\r\n      if (!dataToUpdate.password) {\r\n        delete dataToUpdate.password;\r\n      } if (newCompany.logoUrl instanceof File) { // Check if it's a new file\r\n        formData.append('logoUrl', newCompany.logoUrl);\r\n      } else {\r\n        // If no new file is selected, keep the existing logoUrl (if any)\r\n        if (editingCompany.logoUrl) {\r\n          formData.append('logoUrl', editingCompany.logoUrl); \r\n        }\r\n      }\r\n  \r\n      // Append other company data\r\n      for (const key in dataToUpdate) {\r\n        if (typeof dataToUpdate[key] === 'object') {\r\n          for (const nestedKey in dataToUpdate[key]) {\r\n            formData.append(`${key}.${nestedKey}`, dataToUpdate[key][nestedKey]);\r\n          }\r\n        } else {\r\n          formData.append(key, dataToUpdate[key]);\r\n        }\r\n      }\r\n  \r\n      const response = await axios.put(\r\n        `/api/companies/${editingCompany._id}`,\r\n        formData,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            'Content-Type': 'multipart/form-data', \r\n          },\r\n        }\r\n      );\r\n\r\n        // const response = await axios.put(\r\n        //     `/api/companies/${editingCompany._id}`,\r\n        //     dataToUpdate,\r\n        //     {\r\n        //         headers: {\r\n        //             Authorization: `Bearer ${token}`,\r\n        //         },\r\n        //     }\r\n        // );\r\n\r\n      const updatedCompanies = companies.map((company) =>\r\n        company._id === editingCompany._id ? response.data.updatedCompany : company\r\n      );\r\n      setCompanies(updatedCompanies);\r\n      setModalIsOpen(false);\r\n      setEditingCompany(null);\r\n      setNewCompany({\r\n        name: '',\r\n        email: '',\r\n        password: '',\r\n        companyType: '',\r\n        category: '',\r\n        subcategory: [],\r\n        status: 'Active',\r\n        address: '',\r\n        phoneNumber: '',\r\n        website: '',\r\n        description: '',\r\n        socialMedia: { // Initialize socialMedia here\r\n          facebook: '',\r\n          twitter: '',\r\n          linkedin: '',\r\n          instagram: '',\r\n          telegram: ''\r\n        },\r\n        promotionStartDate: '',\r\n        promotionEndDate: '',\r\n        paymentDetails: {\r\n          paymentMethod: '',\r\n          paymentDate: '',\r\n          paymentAmount: ''\r\n        },\r\n        contactPerson: {\r\n          name: '',\r\n          email: '',\r\n          phoneNumber: ''\r\n        },\r\n        logoUrl: ''\r\n      });\r\n    } catch (error) {\r\n      console.error('Error updating company:', error); \r\n    }\r\n  };\r\n\r\n  const handleDeleteCompany = async () => {\r\n    try {\r\n      await axios.delete(`/api/companies/${companyToDelete}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n      setCompanies(companies.filter((company) => company._id !== companyToDelete));\r\n      setDeleteConfirmModal(false);\r\n    } catch (error) {\r\n      console.error('Error deleting company', error);\r\n    }\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    console.log('Companies:', companies);\r\n  }, [companies]);\r\n  \r\n  useEffect(() => {\r\n    console.log('Filtered Companies:', filteredCompanies);\r\n  }, [filteredCompanies]);\r\n  \r\n  useEffect(() => {\r\n    const fetchCategories = async () => {\r\n      try {\r\n        const response = await axios.get('/api/categories', {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n        setCategories(response.data);\r\n      } catch (error) {\r\n        console.error('Error fetching categories',   \r\n error);\r\n        // Optionally, display an error message to the user\r\n      } finally {\r\n        setIsLoadingCategories(false); \r\n      }\r\n    };\r\n\r\n    fetchCategories();\r\n  }, []); \r\n\r\n\r\n  const fetchSubcategories = async (categoryId) => {\r\n    if (!categoryId) {\r\n      setSubcategories([]);\r\n      return;\r\n    }\r\n  \r\n    try {\r\n      setIsLoadingSubcategories(true);\r\n      const response = await axios.get(`/api/categories/subcategories/${categoryId}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      setSubcategories(response.data);\r\n    } catch (error) {\r\n      console.error('Error fetching subcategories:', error);\r\n    } finally {\r\n      setIsLoadingSubcategories(false);\r\n    }\r\n  };\r\n\r\n  \r\n  const closeModal = () => {\r\n    setModalIsOpen(false);\r\n    setShowAddModal(false);\r\n    setEditingCompany(null);\r\n    setNewCompany({\r\n      name: '',\r\n      email: '',\r\n      password: '',\r\n      companyType: '',\r\n      category: '',\r\n      subcategory: [],\r\n      status: 'Active',\r\n      address: '',\r\n      phoneNumber: '',\r\n      website: '',\r\n      description: '',\r\n      socialMedia: { // Initialize socialMedia here\r\n        facebook: '',\r\n        twitter: '',\r\n        linkedin: '',\r\n        instagram: '',\r\n        telegram: ''\r\n      },\r\n      promotionStartDate: '',\r\n      promotionEndDate: '',\r\n      paymentDetails: {\r\n        paymentMethod: '',\r\n        paymentDate: '',\r\n        paymentAmount: ''\r\n      },\r\n      contactPerson: {\r\n        name: '',\r\n        email: '',\r\n        phoneNumber: ''\r\n      },\r\n      logoUrl: '', // Clear the file input\r\n    });\r\n  };\r\n  return (\r\n    <div className=\"flex flex-col min-h-screen\">\r\n      <AdminNavbar />\r\n\r\n      <div className=\"flex flex-grow\">\r\n        <Sidebar />\r\n        <div className=\"flex-grow p-4\">\r\n          <div className=\"container mx-auto\">\r\n            <h1 className=\"text-2xl font-bold mb-4\">Company Management</h1>\r\n            <div className=\"mb-4\">\r\n            <input\r\n            type=\"text\"\r\n            value={searchQuery}\r\n            onChange={handleSearch}\r\n            placeholder=\"Search companies...\"\r\n            className=\"form-control mb-3\"\r\n          />\r\n        </div>\r\n            <Button variant=\"primary\" onClick={() => setShowAddModal(true)}>Add New Company</Button>\r\n            <table className=\"min-w-full divide-y divide-gray-200 mt-4\">\r\n  <thead>\r\n    <tr>\r\n      <th>Logo</th>\r\n      <th>Name</th>\r\n      <th>Email</th>\r\n      <th>Category</th> \r\n      <th>Status</th>\r\n      <th>Actions</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n              {currentAnnouncements.map((company) => (\r\n                <tr key={company._id}>\r\n                    <td>\r\n          {company.logoUrl && (\r\n            <img\r\n              src={`/${company.logoUrl}`}\r\n              className=\"w-10 h-10 object-cover rounded-lg mb-4\"\r\n              alt={company.name}\r\n            />\r\n          )}\r\n        </td>\r\n                  <td>{company.name}</td>\r\n                  <td>{company.email}</td>\r\n                  <td>{company.companyType}</td>\r\n                  <td>{company.status}</td>\r\n                  <td>\r\n                    <button onClick={() => handleEditCompany(company)} className=\"btn btn-primary btn-sm\">\r\n                      Edit\r\n                    </button>\r\n                    <button onClick={() => { setCompanyToDelete(company._id); setDeleteConfirmModal(true); }} className=\"btn btn-danger btn-sm ml-2\">\r\n                      Delete\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n  </table>\r\n\r\n          </div>\r\n        </div>\r\n\r\n      {/* Add/Edit Company Modal */}\r\n      <Modal show={showAddModal || modalIsOpen} onHide={closeModal}> \r\n\r\n      {/* <Modal show={showAddModal || modalIsOpen} onHide={() => { setShowAddModal(false); setModalIsOpen(false); }}> */}\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>{editingCompany ? 'Edit Company' : 'Add New Company'}</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form onSubmit={editingCompany ? handleUpdateCompany : handleCreateCompany}>\r\n            <Form.Group controlId=\"formCompanyName\">\r\n              <Form.Label>Company Name</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                name=\"name\"\r\n                value={newCompany.name}\r\n                onChange={handleInputChange}\r\n                required\r\n              />\r\n\r\n            </Form.Group>\r\n            <Form.Group controlId=\"formCompanyEmail\">\r\n              <Form.Label>Email</Form.Label>\r\n              <Form.Control\r\n                type=\"email\"\r\n                name=\"email\"\r\n                value={newCompany.email}\r\n                onChange={handleInputChange}\r\n                required\r\n              />\r\n            </Form.Group>\r\n            <Form.Group controlId=\"formCompanyPassword\">\r\n              <Form.Label>Password</Form.Label>\r\n              <Form.Control\r\n                  type=\"password\"\r\n                  name=\"password\" \r\n                  value={newCompany.password}\r\n                  onChange={handleInputChange}\r\n                  required={!editingCompany} // Only required when creating a new company\r\n              />\r\n          </Form.Group>\r\n            <Form.Group controlId=\"formCompanyPassword\">\r\n              <Form.Label>Password</Form.Label>\r\n              <Form.Control\r\n                type=\"password\"\r\n                name=\"password\"\r\n                value={newCompany.password}\r\n                onChange={handleInputChange}\r\n                required={!editingCompany} // Only required when creating a new company\r\n              />\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"formCompanyType\">\r\n              <Form.Label>Company Type</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                name=\"companyType\"\r\n                value={newCompany.companyType}\r\n                onChange={handleInputChange}\r\n                required\r\n              />\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"formCompanyCategory\">\r\n              <Form.Label>Category</Form.Label>\r\n              <Form.Control\r\n                as=\"select\"\r\n                name=\"category\"\r\n                value={newCompany.category}\r\n                onChange={handleInputChange}\r\n                required\r\n              >\r\n                <option value=\"\">Select Category</option>\r\n                {categories.map((category) => (\r\n                  <option key={category._id} value={category._id}>\r\n                    {category.name}\r\n                  </option>\r\n                ))}\r\n              </Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"formCompanySubcategory\">\r\n              <Form.Label>Subcategory</Form.Label>\r\n              <Form.Control\r\n                as=\"select\"\r\n                name=\"subcategory\"\r\n                value={newCompany.subcategory} // Keep the selected subcategory names\r\n                onChange={handleInputChange}\r\n                multiple\r\n              >\r\n                {subcategories.map((subcategory, index) => (\r\n                  <option key={index} value={subcategory}> {/* Use the subcategory name as the value */}\r\n                    {subcategory}\r\n                  </option>\r\n                ))}\r\n              </Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"formCompanyStatus\">\r\n              <Form.Label>Status</Form.Label>\r\n              <Form.Control\r\n                as=\"select\"\r\n                name=\"status\"\r\n                value={newCompany.status}\r\n                onChange={handleInputChange}\r\n                required\r\n              >\r\n                <option value=\"Active\">Active</option>\r\n                <option value=\"Inactive\">Inactive</option>\r\n              </Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"formCompanyAddress\">\r\n              <Form.Label>Address</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                name=\"address\"\r\n                value={newCompany.address}\r\n                onChange={handleInputChange}\r\n                required\r\n              />\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"formCompanyPhoneNumber\">\r\n              <Form.Label>Phone Number</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                name=\"phoneNumber\"\r\n                value={newCompany.phoneNumber}\r\n                onChange={handleInputChange}\r\n                required\r\n              />\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"formCompanyWebsite\">\r\n              <Form.Label>Website</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                name=\"website\"\r\n                value={newCompany.website}\r\n                onChange={handleInputChange}\r\n              />\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"formCompanyDescription\">\r\n              <Form.Label>Description</Form.Label>\r\n              <Form.Control\r\n                as=\"textarea\"\r\n                name=\"description\"\r\n                value={newCompany.description}\r\n                onChange={handleInputChange}\r\n              />\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"formCompanyLogo\">\r\n              <Form.Label>Company Logo</Form.Label>\r\n              <Form.Control\r\n                type=\"file\"\r\n                name=\"logoUrl\"\r\n                onChange={handleInputChange}\r\n              />\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"formCompanySocialMedia\">\r\n              <Form.Label>Social Media</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                name=\"facebook\"\r\n                placeholder=\"Facebook URL\"\r\n                value={newCompany.socialMedia?.facebook || ''} // Optional chaining to handle undefined\r\n                onChange={handleSocialMediaChange}\r\n              />\r\n              <Form.Control\r\n                type=\"text\"\r\n                name=\"twitter\"\r\n                placeholder=\"Twitter URL\"\r\n                value={newCompany.socialMedia?.twitter || ''}\r\n                onChange={handleSocialMediaChange}\r\n              />\r\n              <Form.Control\r\n                type=\"text\"\r\n                name=\"linkedin\"\r\n                placeholder=\"LinkedIn URL\"\r\n                value={newCompany.socialMedia?.linkedin || ''}\r\n                onChange={handleSocialMediaChange}\r\n              />\r\n              <Form.Control\r\n                type=\"text\"\r\n                name=\"instagram\"\r\n                placeholder=\"Instagram URL\"\r\n                value={newCompany.socialMedia?.instagram || ''}\r\n                onChange={handleSocialMediaChange}\r\n              />\r\n              <Form.Control\r\n                type=\"text\"\r\n                name=\"telegram\"\r\n                placeholder=\"telegram URL\"\r\n                value={newCompany.socialMedia?.telegram || ''}\r\n                onChange={handleSocialMediaChange}\r\n              />\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"formCompanyPromotionStartDate\">\r\n              <Form.Label>Promotion Start Date</Form.Label>\r\n              <Form.Control\r\n                type=\"date\"\r\n                name=\"promotionStartDate\"\r\n                value={newCompany.promotionStartDate ? newCompany.promotionStartDate.split('T')[0] : ''}\r\n                // value={newCompany.promotionStartDate}\r\n                onChange={handleInputChange}\r\n              />\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"formCompanyPromotionEndDate\">\r\n              <Form.Label>Promotion End Date</Form.Label>\r\n              <Form.Control\r\n                type=\"date\"\r\n                name=\"promotionEndDate\"\r\n                value={newCompany.promotionEndDate ? newCompany.promotionEndDate.split('T')[0] : ''}\r\n                // value={newCompany.promotionEndDate}\r\n                onChange={handleInputChange}\r\n              />\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"formCompanyPaymentDetails\">\r\n              <Form.Label>Payment Details</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                name=\"paymentMethod\"\r\n                placeholder=\"Payment Method\"\r\n                value={newCompany.paymentDetails?.paymentMethod || ''}\r\n                onChange={handlePaymentDetailsChange}\r\n              />\r\n              <Form.Control\r\n                type=\"date\"\r\n                name=\"paymentDate\"\r\n                placeholder=\"Payment Date\"\r\n                value={newCompany.paymentDate ? newCompany.paymentDate.split('T')[0] : ''}\r\n                // value={newCompany.paymentDetails?.paymentDate || ''}\r\n                onChange={handlePaymentDetailsChange}\r\n              />\r\n              <Form.Control\r\n                type=\"number\"\r\n                name=\"paymentAmount\"\r\n                placeholder=\"Payment Amount\"\r\n                value={newCompany.paymentDetails?.paymentAmount || ''}\r\n                onChange={handlePaymentDetailsChange}\r\n              />\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"formCompanyContactPerson\">\r\n              <Form.Label>Contact Person</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                name=\"contactPersonName\"\r\n                placeholder=\"Contact Person Name\"\r\n                value={newCompany.contactPerson?.name || ''}\r\n                onChange={(e) => handleContactPersonChange(e, 'name')}\r\n              />\r\n              <Form.Control\r\n                type=\"email\"\r\n                name=\"contactPersonEmail\"\r\n                placeholder=\"Contact Person Email\"\r\n                value={newCompany.contactPerson?.email || ''}\r\n                onChange={(e) => handleContactPersonChange(e, 'email')}\r\n              />\r\n              <Form.Control\r\n                type=\"text\"\r\n                name=\"contactPersonPhone\"\r\n                placeholder=\"Contact Person Phone Number\"\r\n                value={newCompany.contactPerson?.phoneNumber || ''}\r\n                onChange={(e) => handleContactPersonChange(e, 'phoneNumber')}\r\n              />\r\n            </Form.Group>\r\n\r\n            <Modal.Footer>\r\n              <Button variant=\"secondary\" onClick={() => setModalIsOpen(false)}>\r\n                Close\r\n              </Button>\r\n              <Button variant=\"primary\" type=\"submit\">\r\n              {editingCompany ? 'Update Company' : 'Create Company'}\r\n            </Button>\r\n            </Modal.Footer>\r\n          </Form>\r\n        </Modal.Body>\r\n      </Modal>\r\n\r\n\r\n      {/* Delete Confirmation Modal */}\r\n      <Modal show={deleteConfirmModal} onHide={() => setDeleteConfirmModal(false)}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Confirm Delete</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          Are you sure you want to delete this company?\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={() => setDeleteConfirmModal(false)}>\r\n            Cancel\r\n          </Button>\r\n          <Button variant=\"danger\" onClick={handleDeleteCompany}>\r\n            Delete\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n     \r\n      </div>\r\n      <Footer />\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default Company;\r\n\r\n\r\n","import React from 'react';\r\n\r\nconst AdminFooter = () => {\r\n  return (\r\n    <footer className=\"bg-blue-600 p-4 text-white text-center\">\r\n      <p>&copy; 2024 Your Company. All rights reserved.</p>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default AdminFooter;\r\n","import React from 'react';\r\n\r\nconst AdminNavbar = () => {\r\n  return (\r\n    <nav className=\"bg-blue-600 p-4 text-white\">\r\n      <h1 className=\"text-lg font-bold\">Admin Dashboard</h1>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default AdminNavbar;\r\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { AiOutlineMenu, AiOutlineClose } from 'react-icons/ai';\r\n\r\nconst Sidebar = () => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggleSidebar = () => {\r\n    setIsOpen(!isOpen);\r\n  };\r\n\r\n  return (\r\n    <div className=\"relative\">\r\n      {/* Mobile menu button */}\r\n      <button\r\n        className=\"lg:hidden text-black p-4 focus:outline-none\"\r\n        onClick={toggleSidebar}\r\n      >\r\n        {isOpen ? <AiOutlineClose size={24} /> : <AiOutlineMenu size={24} />}\r\n      </button>\r\n\r\n      {/* Sidebar */}\r\n      <div\r\n        className={`fixed top-0 left-0 w-64 h-full bg-gray-800 text-white z-40 transform transition-transform duration-300 ease-in-out ${\r\n          isOpen ? 'translate-x-0' : '-translate-x-full'\r\n        } lg:translate-x-0 lg:relative lg:w-64 lg:transform-none`}\r\n      >\r\n        <ul className=\"space-y-6 p-4\"> {/* Reduces vertical space between list items */}\r\n          <li>\r\n            <Link\r\n              to=\"/dashboard\"\r\n              className=\"block px-4 py-2 no-underline text-white hover:bg-black transition-colors duration-300\"\r\n              onClick={toggleSidebar}\r\n            >\r\n              Dashboard\r\n            </Link>\r\n          </li>\r\n          <li>\r\n            <Link\r\n              to=\"/dashboard/admin\"\r\n              className=\"block px-4 py-2 no-underline text-white hover:bg-black transition-colors duration-300\"\r\n              onClick={toggleSidebar}\r\n            >\r\n              Admin\r\n            </Link>\r\n          </li>\r\n          <li>\r\n            <Link\r\n              to=\"/dashboard/category\"\r\n              className=\"block px-4 py-2 no-underline text-white hover:bg-black transition-colors duration-300\"\r\n              onClick={toggleSidebar}\r\n            >\r\n              Categories\r\n            </Link>\r\n          </li>\r\n          <li>\r\n            <Link\r\n              to=\"/dashboard/company\"\r\n              className=\"block px-4 py-2 no-underline text-white hover:bg-black transition-colors duration-300\"\r\n              onClick={toggleSidebar}\r\n            >\r\n              Companies\r\n            </Link>\r\n          </li>\r\n          <li>\r\n            <Link\r\n              to=\"/dashboard/promotion\"\r\n              className=\"block px-4 py-2 no-underline text-white hover:bg-black transition-colors duration-300\"\r\n              onClick={toggleSidebar}\r\n            >\r\n              Promotion\r\n            </Link>\r\n          </li>\r\n          <li>\r\n            <Link\r\n              to=\"#\"\r\n              className=\"block px-4 py-2 no-underline text-white hover:bg-black transition-colors duration-300\"\r\n              onClick={toggleSidebar}\r\n            >\r\n              Payment\r\n            </Link>\r\n          </li>\r\n          <li>\r\n            <Link\r\n              to=\"#\"\r\n              className=\"block px-4 py-2 no-underline text-white hover:bg-black transition-colors duration-300\"\r\n              onClick={toggleSidebar}\r\n            >\r\n              Report\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n\r\n      {/* Overlay for mobile sidebar */}\r\n      {isOpen && (\r\n        <div\r\n          className=\"fixed inset-0 bg-black opacity-50 z-30 lg:hidden\"\r\n          onClick={toggleSidebar}\r\n        ></div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n"],"names":["Company","_newCompany$socialMed","_newCompany$socialMed2","_newCompany$socialMed3","_newCompany$socialMed4","_newCompany$socialMed5","_newCompany$paymentDe","_newCompany$paymentDe2","_newCompany$contactPe","_newCompany$contactPe2","_newCompany$contactPe3","companies","setCompanies","useState","filteredCompanies","setFilteredCompanies","searchQuery","setSearchQuery","newCompany","setNewCompany","name","email","password","companyType","category","subcategory","status","address","phoneNumber","website","description","socialMedia","facebook","twitter","linkedin","instagram","telegram","promotionStartDate","promotionEndDate","paymentDetails","paymentMethod","paymentDate","paymentAmount","contactPerson","logoUrl","categories","setCategories","subcategories","setSubcategories","editingCompany","setEditingCompany","modalIsOpen","setModalIsOpen","deleteConfirmModal","setDeleteConfirmModal","companyToDelete","setCompanyToDelete","isLoadingCategories","setIsLoadingCategories","isLoadingSubcategories","setIsLoadingSubcategories","announcements","setAnnouncements","currentPage","setCurrentPage","announcementsPerPage","promotions","setPromotions","showModal","setShowModal","showAddModal","setShowAddModal","currentPromotion","setCurrentPromotion","showToast","setShowToast","toastMessage","setToastMessage","showConfirmDelete","setShowConfirmDelete","promotionToDelete","setPromotionToDelete","file","setFile","token","localStorage","getItem","useEffect","fetchCompanies","fetchCategories","fetchSubcategories","async","response","axios","get","headers","Authorization","data","error","console","fetchPromotions","indexOfLastAnnouncement","indexOfFirstAnnouncement","currentAnnouncements","filter","announcement","toLowerCase","includes","slice","handleInputChange","e","value","type","files","target","prev","selectedSubcategories","Array","from","selectedOptions","option","handleSocialMediaChange","prevState","handlePaymentDetailsChange","handleContactPersonChange","field","log","categoryId","_jsxs","className","children","_jsx","AdminNavbar","Sidebar","onChange","event","query","placeholder","Button","variant","onClick","map","company","src","alt","handleEditCompany","_id","Modal","show","onHide","closeModal","Header","closeButton","Title","Body","Form","onSubmit","preventDefault","formData","FormData","dataToUpdate","File","append","key","nestedKey","put","updatedCompanies","updatedCompany","companyData","post","message","alert","Group","controlId","Label","Control","required","as","multiple","index","split","Footer","delete","AdminFooter","isOpen","setIsOpen","toggleSidebar","AiOutlineClose","size","AiOutlineMenu","Link","to"],"sourceRoot":""}